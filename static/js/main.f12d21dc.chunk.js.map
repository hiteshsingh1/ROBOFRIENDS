{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","className","alt","src","this","props","id","height","width","name","email","React","Component","Cardlist","robots","cardsArray","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","children","ErrorBoundary","state","hasError","error","info","setState","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredrobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAgBeA,E,uKAZP,OACI,yBAAKC,UAAU,wDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BC,KAAKC,MAAMC,IAAMC,OAAO,QAAQC,MAAM,UACrF,6BACI,4BAAKJ,KAAKC,MAAMI,MAChB,2BAAIL,KAAKC,MAAMK,a,GAPhBC,IAAMC,WCiBVC,EAhBI,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAERC,EAAWD,EAAOE,KAAI,SAACC,EAAKC,GAC7B,OACA,kBAAC,EAAD,CAAOC,IAAKD,EAAGZ,GAAIQ,EAAOI,GAAGZ,GAAIG,KAAMK,EAAOI,GAAGT,KAAMC,MAAOI,EAAOI,GAAGR,WAI5E,OACI,6BACKK,ICHFK,EARE,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACX,OACI,yBAAKpB,UAAU,OACX,2BAAOqB,KAAK,SAASC,YAAY,gBAAgBtB,UAAU,mCAAmCuB,SAAUH,MCKzGI,G,MARA,SAACpB,GACZ,OACI,yBAAKqB,MAAO,CAACC,SAAS,SAAUC,OAAO,kBAAmBrB,OAAO,UAC5DF,EAAMwB,YCsBJC,E,kDAxBX,WAAYzB,GAAO,IAAD,8BACd,gBACK0B,MAAM,CACPC,UAAS,GAHC,E,8DAOAC,EAAMC,GACpB9B,KAAK+B,SAAS,CAACH,UAAS,M,+BAKpB,OAAG5B,KAAK2B,MAAMC,SAEH,qDAEJ5B,KAAKC,MAAMwB,a,GAlBFlB,IAAMC,WCiDnBwB,E,kDA3CX,aAAc,IAAD,8BACT,gBAMJC,eAAe,SAACC,GACZ,EAAKH,SAAS,CAACI,YAAYD,EAAME,OAAOC,SANxC,EAAKV,MAAM,CACPjB,OAAO,GACPyB,YAAY,IAJP,E,gEAYO,IAAD,OACfG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKX,SAAS,CAACrB,OAAOgC,S,+BAG9B,IAAD,EACuB1C,KAAK2B,MAAzBjB,EADH,EACGA,OAAOyB,EADV,EACUA,YAERQ,EAAejC,EAAOkC,QAAO,SAACC,GAChC,OAAOA,EAAMxC,KAAKyC,cAAcC,SAASZ,EAAYW,kBAEzD,OAAIpC,EAAOsC,OAKP,yBAAKnD,UAAU,MACX,wBAAIA,UAAU,cAAd,eACA,kBAAC,EAAD,CAAWoB,aAAcjB,KAAKiC,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUvB,OAAQiC,OATvB,2C,GA1BDpC,IAAMC,WCKJyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLmC,QAAQnC,MAAMA,EAAMoC,a","file":"static/js/main.f12d21dc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Card extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className='tc bg-light-green dib br3  pa3 ma2 grow bw2 shadow-5'>\r\n                <img alt='robots' src={`https://robohash.org/${this.props.id}`} height='200px' width='200px' />\r\n                <div>\r\n                    <h2>{this.props.name}</h2>\r\n                    <p>{this.props.email}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n    const Cardlist=({robots})=>{\r\n\r\n       const cardsArray=robots.map((user,i)=>{\r\n            return (\r\n            <Card  key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}  />\r\n            );\r\n        }); \r\n    \r\n        return(\r\n            <div>\r\n                {cardsArray}\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst SearchBox= ({searchChange})=>{\r\n        return (\r\n            <div className='pa2'>\r\n                <input type='search' placeholder='search robots' className='pa3 ba b--green bg-lightest-blue' onChange={searchChange} />\r\n            </div>\r\n        );\r\n  }\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div style={{overflow:'scroll', border:'5px solid black', height:'800px'  }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component{\r\n    constructor(props){\r\n        super();\r\n        this.state={\r\n            hasError:false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true})\r\n    }\r\n    \r\n\r\n    render(){\r\n            if(this.state.hasError)\r\n            {\r\n                return <h1>OOps.That is Not Good</h1>\r\n            }\r\n            return this.props.children;\r\n       \r\n    }\r\n\r\n}\r\n\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport Cardlist from '../components/Cardlist';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\n\r\nclass App extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            robots:[],\r\n            searchfield:''\r\n        }\r\n    }\r\n    onSearchChange=(event)=>{\r\n        this.setState({searchfield:event.target.value})\r\n            \r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=>response.json())\r\n        .then(users=>this.setState({robots:users}))\r\n    }\r\n\r\n    render(){\r\n        const {robots,searchfield}=this.state;\r\n\r\n        const filteredrobots=robots.filter((robot)=>{\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        });\r\n        if(!robots.length){\r\n            return <h1>Loading</h1>;\r\n        }\r\n        else{\r\n        return (\r\n            <div className='tc'> \r\n                <h1 className='f-headline'>Robofriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange} />    \r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <Cardlist robots={filteredrobots} />\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}